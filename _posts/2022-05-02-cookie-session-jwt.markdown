---
layout: post
title: "[CS] cookie, session, token"
date: 2022-05-03 08:00:00 +0530
categories: CS
---

쿠키, 세션, 토큰에 대해서 작성한 글입니다. 브라우저와 서버가 소통하는 방식에 대해서 이야기 합니다.

## 쿠키, 세션, JWT

http 프로토콜의 특징을 가볍게 짚고 넘어가자면

> 1. connectionless

    클라이언트와 서버가 요청과 응답을 한번 주고받으면 연결을 끊어버리는 특징

<br>

> 2. stateless

    요청과 응답으로 인해 통신이 끝난다면 상태 정보를 유지하지 않는 특징

<br>

위와 같은 특징으로 인해 `쿠키, 세션, JWT`를 이용한 사용자 인증에 대한 정보 유지를 불가피하게 한다.

<br>

### 쿠키

<hr>

쿠키는 클라이언트에 저장되는 `key`와 `value`로 이루어진 데이터이다.
인증 유효 시간을 설정할 수 있고 유효 시간이 정해진다면 클라이언트가 종료되어도 쿠키가 유지된다.
서버와 요청 응답으로 인해 쿠키가 저장되면 다음 요청은 쿠키에 담긴 정보를 이용해 참조한다.

### 쿠키 동작 방식

1. 클라이언트가 로그인 요청
2. 서버에서 쿠키 생성 후 클라이언트로 전달
3. 클라이언트가 서버로 요청을 보낼 때 쿠키를 전송
4. 쿠키를 이용해 유저 인증을 진행

그러나 문제점으로 사용자 인증에 대한 정보를 모두 클라이언트가 가지고 있게되므로
`http 요청을 탈취당할 경우` 쿠키 자체를 탈취당해 사용자 정보를 모두 빼앗길 수 있다.

쿠키는 http 요청이 있을 때마다 서버로 전송이 됩니다.\
그래서 쿠키 자체는 보안과는 큰 상관이 없는 장바구니 혹은 자동로그인 설정 등에 이용할 수 있다고 한다.

<br>

### 세션

<hr>

세션은 쿠키를 기반으로 하지만 클라이언트에 저장하는 쿠키와는 다르게 `서버에 저장`하여 관리한다.
서버에서는 클라이언트를 구별하기 위해 각각의 세션ID를 클라이언트마다 부여하게되며 `클라이언트가 종료되기 전까지 유지`한다.
클라이언트에 저장하는 쿠키보다는 보안이 좋다.

<br>

### 세션 동작 방식

1. 클라이언트가 로그인 요청

2. 서버에서는 클라이언트에게 고유한 세션ID를 부여하고 세션 저장소에 저장한 후
   클라이언트에게 발급한다.

3. 클라이언트는 서버에서 발급받은 세션ID를 쿠키에 저장하게 되고 요청을 보낼 때 마다 쿠키를 보낸다.

4. 서버는 쿠키에 담겨있는 세션ID와 세션 저장소에 있는 정보와 대조한 후 데이터를 가져온다.

<br>

세션 또한 문제점이 있는데 `세션 하이재킹 공격`이 가능하니 세션의 유효시간을 만들어 예방할 수 있다.\
그리고 세션 저장소를 서버에서 관리하기 때문에 사용자가 많아지면 많아질수록 `서버에 걸리는 부하`가 증가한다.\
동시 접속자가 많아지면 해결할 방법을 찾아야 될것이다.

<br>

### 토큰(JWT)

<hr>

JWT는 `Json Web Token`의 약자이고 인증에 필요한 정보들을 암호화시킨 토큰을 말한다.
세션 방식처럼 토큰 자체를 쿠키에 담아서 보내줄 수도 있고 HTTP 헤더에 담아서 보내줄 수도 있다.
토큰은 3가지 요소로 구성되어 있다.

**Header: 3가지 요소를 암호화할 알고리즘 등과 같은 옵션이 들어간다.**

**Payload: 유저의 고유 ID 등 인증에 필요한 정보가 들어간다.**

**Verify Signature: Header, Payload와 Secret Key가 더해져 암호화된다.**

Header.PayLoad.VerifySignature로 만들어진다.\
Header와 Payload는 누구나 디코딩하여 내용을 확인할 수 있기때문에 유저의 비밀번호 같은 정보는 넣지 않도록 한다.\
하지만 Secret Key를 알지 못하면 `VerifySignature는 복호화할 수 없다`.\
그렇기 때문에 토큰을 변조하더라도 VerifySignature가 Payload를 기반으로 암호화 되었기 때문에 유효하지 않은 토큰으로
검증이 가능하다.

<br>

### 토큰 동작 방식

1. 클라이언트가 로그인 요청
2. 서버에서 유저의 고유한 ID와 다른 인증 정보들과 함께 Payload에 담는다.
3. JWT의 유효기간 설정 및 옵션을 설정해준다.
4. Secret Key를 이용해 토큰을 발급한다.
5. 발급된 토큰은 클라이언트에 쿠키 혹은 로컬스토리지 등에 저장하여 요청을 보낼 때마다 같이 보낸다.
6. 서버는 토큰을 Secret Key로 복호화하여 검증하는 과정을 거친다.
7. 검증이 완료되면 대응하는 데이터를 보내준다.

<br>

토큰은 일단 세션보다 훨씬 간편하다.\
세션처럼 `별도의 저장소 관리가 필요하지 않고` 토큰을 발급 후 클라이언트에게 전송 후 검증하는 과정만 있으면 된다.\
그러나 발급된 `JWT는 삭제가 불가능`하다.\
세션 같은 경우에는 악의정으로 사용된다면 해당 세션을 삭제하면 된다.\
토큰은 탈취당하게 되면 유효 시간이 종료되기 전까지는 탈취자가 얼마든지 악의적으로 사용이 가능하다.\
그래서 `Refresh Token`이라는 것을 이용해 피해를 조금이라도 줄일 수 있다.
