---
layout: post
title: "[JS] why redux?"
date: 2022-05-01 08:00:00 +0530
categories: JS, React
---

리덕스는 상태관리를 위한 툴입니다. 상태를 전역 변수화하여 부모와 자식간의 props를 건네주는 방식보다 훨씬 효율적으로 상태 관리를 할 수 있다는 특징이 있습니다. 그런데 redux만 그게 가능하진 않습니다. 그렇다면 왜 리덕스를 사용할까요?

## Redux 란 어플리케이션의 클라이언트쪽 state를 관리하기 위한 거대한 이벤트 루프입니다.

![redux-data-flow](https://macgle.files.wordpress.com/2022/03/redux-data-flow.gif?w=1024)

- 초기 상태
  - 먼저 root reducer 함수를 사용하여 만들어진 리덕스 스토어가 있다.
  - 스토어는 root reducer를 한번 호출하고 리턴 값을 초기 상태로 저장한다.
  - UI가 처음 렌더링될 때, UI 컴포넌트는 리덕스 스토어의 상태에 접근하여 그것을 렌더링에 활용한다. 또한 그것들은 후에 상태의 변화가 업데이트 되는 것을 구독한다.
- 업데이트(순서)
  1. 유저가 버튼을 클릭한다.
  2. 앱은 유저의 행동에 맞는 디스패치를 실행해 액션을 일으킨다.
  3. 스토어는 이전 상태와 현재 액션으로 리듀서 함수를 실행하고, 그 리턴 값을 새로운 상태로 저장한다.
  4. 스토어는 스토어를 구독하고 있던 UI들에게 업데이트 되었다고 알려준다.
  5. 스토어의 데이터가 필요한 각각의 UI들은 필요한 상태가 업데이트 되었는지 확인한다.
  6. 데이터가 변경된 각 구성요소는 새 데이터로 강제로 다시 렌더링하므로 화면에 표시되는 내용을 업데이트 할 수 있다.

<hr>

Redux는 클라이언트 앱의 복잡성을 제어하기 위한 하나의 state 제어 수단이며, store라는 커다란 하나의 state를 만들어 각각의 컴퍼넌트에 제공합니다.

특히 redux는 대형 프로젝트에서 state를 관리할 때 아주 유용하게 사용된다. redux를 사용하면 장점은 app의 state 변화가 예층 가능하게 변한다는 점이다.

Redux 를 사용하는 경우는 다음과 같다.

- 앱의 여러 위치에서 필요한 많은 양의 상태들이 존재할 때 (전역 상태가 필요하다고 느껴질 때)
- 상태들이 자주 업데이트 될 때
- 상태를 업데이트 하는 로직이 복잡할 때
- 앱이 중간 또는 큰 사이즈의 코드를 갖고 있고 많은 사람들에 의해 코드가 관리될 때
- 상태가 업데이트되는 시점을 관찰할 필요가 있을 때

<br>

![redux-data-flow](https://user-images.githubusercontent.com/89245389/167898178-9293ea8f-edc5-4b9c-9fbc-d50466e4608a.gif)

<br>

## 리덕스 툴킷

<hr>

리덕스에는 3가지 문제점이 있다.

1. 리덕스 스토어를 구성하는 것은 너무 복잡하다.
2. 리덕스가 유용해지려면 많은 패키지들을 추가로 설치해야한다.
3. 리덕스는 너무 많은 보일러플레이트 코드를 요구한다.

리덕스 툴킷에는 미들웨어 설정, Redux-thunk, immer, redux-actions를 다운로드 받지 않고 바로 쓸 수 있기 때문에 더 유리하다.

리덕스 툴킷 장점

- action type이나 action creator를 따로 생성해주지 않아도 된다.
- 미들웨어 추가가 편리하다.
- immer가 내장되어 있어 mutable 객체를 사용해도 된다.
- redux thunk가 내장되어 있어 비동기를 지원한다.
- 타입스크립트 지원이 잘된다.

<br>

### 사실 위의 내용은 반은 맞고 반은 틀리다...!

context API와 recoil도 리덕스와 비슷한 기능을 한다.

`전역변수 개념`

그렇다면 리덕스와의 차이점을 알아보겠습니다.

### Context API vs Redux

<hr>
context API 란?

Context API는 Redux와 마찬가지로 상태의 중앙 관리를 위한 상태 관리 도구입니다. Redux와 다르게 React에서만 사용할 수 있습니다. 리덕스와 다르게 여러 저장소가 존재할 수 있습니다.

> 그래서 리덕스랑 뭐가 다른건데? 리덕스가 특별한 이유...!

- 로컬 스토리지에 상태를 영속적으로 저장하고 시작할 때 다시 불러오는데 특히 뛰어남
- 상태를 서버에서 미리 채워서 HTML에 담아 클라언트로 보내고 앱을 시작할 때 다시 불러오는데 특히 뛰어남
- 액션 객체를 네트워크를 통해 보내면 협업 환경 구현 가능(순수함수)
- 코드를 크게 바꾸지 않고도 구현
- ...

> 하지만 리덕스는 코드 양이 많죠? 굳이 필요하지 않다면 안해도 됩니다. 닭잡는데 소잡는 칼을 쓰지말자고들 이야기합니다.

- 오직 전역 상태 관리를 위한다면 Context API를 사용하라.
- **상태 관리 외에 여러 기능이 필요하다면 Redux 를 사용하라.**
- high-frequency한 어플리케이션의 경우 Context API를 사용하면 성능상 이슈가 있을 수 있다.

<br>

### 리덕스 장점 하나더! 미들웨어

<hr>

### redux-saga

1. 비동기 작업을 할 때 `기존 요청을 취소` 처리 할 수 있습니다
2. 특정 액션이 발생했을 때 이에 따라 `다른 액션이 디스패치`되게끔 하거나, 자바스크립트 코드를 실행 할 수 있습니다.
3. 웹소켓을 사용하는 경우 `Channel 이라는 기능`을 사용하여 더욱 효율적으로 코드를 관리 할 수 있습니다 (참고)
4. `API 요청이 실패했을 때 재요청`하는 작업을 할 수 있습니다.

### redux-thunk

1. 리덕스에서 비동기 작업을 처리 할 때 가장 많이 사용하는 미들웨어입니다. 이 미들웨어를 사용하면 `액션 객체가 아닌 함수를 디스패치` 할 수 있습니다.

<br>

## 저는 recoil을 쓰렵니다.

<hr>

![recoil](https://i.ytimg.com/vi/_ISAA_Jt9kI/maxresdefault.jpg)

코드 양이 많다는 리덕스의 문제를 해결하였습니다.

리액트 내에서 상당히 많은 경우에 redux-thunk를 대체할 수 있습니다.

<br>
<hr>
reference 
블로그 이전

[https://wordpress.com/post/macgle.wordpress.com/579](https://wordpress.com/post/macgle.wordpress.com/579)
